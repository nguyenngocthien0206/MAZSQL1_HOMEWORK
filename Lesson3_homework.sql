-- PART 1: Use database Adventurework
-- Task 1: Generate invoice reports
/*1.1 Retrieve customer orders
o As an initial step towards generating the invoice report, write a query that returns the
company name from the SalesLT.Customer table, and the sales order ID and total
due from the SalesLT.SalesOrderHeader table.*/
SELECT c.CompanyName, oh.SalesOrderID, oh.TotalDue
FROM SalesLT.Customer c
JOIN SalesLT.SalesOrderHeader oh ON oh.CustomerID = c.CustomerID

/*1.2 Retrieve customer orders with addresses
o Extend your customer orders query to include the Main Office address for each
customer, including the full street address, city, state or province, postal code, and
country or region
o Tip: Note that each customer can have multiple addressees in
the SalesLT.Address table, so the database developer has created
the SalesLT.CustomerAddress table to enable a many-to-many relationship
between customers and addresses. Your query will need to include both of these
tables, and should filter the results so that only Main Office addresses are included.*/
SELECT c.CompanyName, a.AddressLine1, ISNULL(a.AddressLine2,'') AS AddressLine2
    , a.City, a.StateProvince, a.PostalCode, a.CountryRegion, oh.SalesOrderID, oh.TotalDue
FROM SalesLT.Customer c
JOIN SalesLT.CustomerAddress ca ON ca.CustomerID = c.CustomerID
JOIN SalesLT.Address a ON a.AddressID = ca.AddressID
JOIN SalesLT.SalesOrderHeader oh ON oh.CustomerID = c.CustomerID
WHERE ca.AddressType = 'Main Office'

-- Task 2: Retrieve customer data
/*Retrieve a list of products
○ A sales manager needs a list of ordered product with more information.
You must write a query that returns a list of product name (is generated by
the string preceded by the '-' character (example: HL Road Frame)), only
started selling in 2006, Product model name contains 'Road', CategoryName
contains 'Bikes'; and ListPrice value with integer part equal to 2443*/
SELECT SUBSTRING(p.Name,0,CHARINDEX('-',p.Name)) AS ProductName, p.ProductCategoryID, pc.Name
FROM SalesLT.Product p
JOIN SalesLT.ProductCategory pc ON pc.ProductCategoryID = p.ProductCategoryID
JOIN SalesLT.ProductModel pm ON pm.ProductModelID = p.ProductModelID
WHERE pc.Name LIKE '%Bikes%' AND pm.Name LIKE '%Road%' AND CAST(p.ListPrice AS INT) = 2443


-- PART 2: Use database PayTM
-- Task 1: Retrieve reports on transaction scenarios
/*1.1 Retrieve a report that includes the following information: customer_id, transaction_id,
scenario_id, transaction_type, sub_category, category. These transactions must meet the
following conditions:
 Were created in Jan 2019
 Transaction type is not payment*/
SELECT ft.customer_id, ft.transaction_id, ft.scenario_id, ds.transaction_type,ds.sub_category,ds.category
FROM dbo.fact_transaction_2019 ft
JOIN dbo.dim_scenario ds ON ds.scenario_id = ft.scenario_id
WHERE MONTH(ft.transaction_time) = 1 AND ds.transaction_type != 'Payment'

/*1.2 Retrieve a report that includes the following information: customer_id, transaction_id,
scenario_id, transaction_type, category, payment_method. These transactions must meet the
following conditions:
 Were created from Jan to June 2019
 Had category type is shopping
 Were paid by Bank account*/
SELECT ft.customer_id, ft.transaction_id, ft.scenario_id, ds.transaction_type,ds.sub_category,ds.category
FROM dbo.fact_transaction_2019 ft
JOIN dbo.dim_scenario ds ON ds.scenario_id = ft.scenario_id
JOIN dbo.dim_payment_channel dpc ON dpc.payment_channel_id = ft.payment_channel_id
WHERE (MONTH(ft.transaction_time) BETWEEN 1 AND 6) AND ds.category = 'Shopping' AND dpc.payment_method = 'Bank account'

/*1.3 Retrieve a report that includes the following information: customer_id, transaction_id,
scenario_id, payment_method and payment_platform. These transactions must meet the
following conditions:
 Were created in Jan 2019 and Jan 2020
 Had payment platform is website*/
SELECT ft.customer_id, ft.transaction_id, ft.scenario_id, ds.transaction_type,ds.sub_category,ds.category
FROM (
    SELECT * FROM dbo.fact_transaction_2019
    UNION
    SELECT * FROM dbo.fact_transaction_2020) as ft
JOIN dbo.dim_scenario ds ON ds.scenario_id = ft.scenario_id
JOIN dbo.dim_platform dp ON dp.platform_id = ft.platform_id
WHERE (MONTH(ft.transaction_time)= 1 AND (YEAR(ft.transaction_time) IN (2019,2020))) AND dp.payment_platform = 'ios'

/*1.4 Retrieve a report that includes the following information: customer_id, transaction_id,
scenario_id, payment_method and payment_platform. These transactions must meet the
following conditions:
 Include all transactions of the customer group created in January 2019 (Group A) and
additional transactions of this customers (Group A) continue to make transactions in
January 2020.
 Payment platform is iOS*/
SELECT ft.customer_id, ft.transaction_id, ft.scenario_id, ds.transaction_type,ds.sub_category,ds.category
FROM dbo.fact_transaction_2019 ft
JOIN dbo.dim_scenario ds ON ds.scenario_id = ft.scenario_id
JOIN dbo.dim_platform dp ON dp.platform_id = ft.platform_id
WHERE MONTH(ft.transaction_time)= 1 AND dp.payment_platform = 'ios'
AND ft.customer_id IN (
                        SELECT customer_id
                        FROM dbo.fact_transaction_2020
                        WHERE MONTH(transaction_time) = 1
)